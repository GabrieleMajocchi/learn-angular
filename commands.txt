
-Creare un nuovo progetto con Angular
    ng new nomeProgetto
    ng new nomeProgetto --no-standalone               <-- Da angular 17 i progetti sono standalone di default quindi per usare i Module dobbiamo usare questo comando

-Nel caso si usasse una repo già inizializzata presa di github installare i vari pacchetti
    npm install

-Se non fossimo già nella cartella dal terminale
    cd nome-cartella

-Creiamo la parte di environments che dalla versione 15 di Angular non c'è più

    ng generate environments

    -Di conseguenza dobbiamo aggiornare angular.json andando a modificare dentro build sotto "development" (possibile riga 58)
    Copiamo tutta la parte di "Development" e andiamo a incollarla subito sotto cambiando nome in staging e percorso del "with"
    in environment.staging.ts. Il risultato dovrebbe essere il seguente:
        "staging": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true,
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.staging.ts"
                }
              ]
            }
    -Creiamo una copia del file environment.development.ts e lo rinominiamo environment.staging.ts

    -Creiamo un nuovo comando usabile che sarà staging dentro il nostro package.json. Inseriamo sotto "watch" (riga 8) il nuovo comando
    "staging" che si riferirà allo staging configuration. Il codice da aggiungere è il seguente:
        "staging": "ng build --watch --configuration staging"

    -Nei file dell'environment mettiamo production:false o true per far andare in produzione o restare in test
    Il codice dovrebbe essere:
        export const environment = {
            production: false
        };

    -Aggiorniamo il main.ts importando la ProdMode e l'environment aggiungendo il seguente codice:
        import { enableProdMode } from '@angular/core';

        import { environment } from './environments/environment';

        if (environment.production) {
        enableProdMode();
        }

-Startiamo il server (--open apre direttamente la pagina sul browser)
    ng serve --open
-Possiamo fare la stessa cosa con
    npm run start (oppure per usare le altre opzioni del package.json possiamo fare watch oppure staging)

-Creazione nuovo componente (si può fare anche a mano creando i singoli file)
    ng generate component nomeComponente    (short ng g c nomeComponente)

-Installazione di Angular material
    ng add @angular/material

    Fatto l'install importiamo i componenti che ci servono in app.module.ts ad esempio per lo slide:
        import { MatSlideToggleModule } from '@angular/material/slide-toggle';

        @NgModule ({
        imports: [
            MatSlideToggleModule,
        ]
        })

    Tutti i componenti li trovo qui: https://material.angular.io/components/categories
    Dato che se ne usano svariati se ne usiamo tanti conviene fare un modulo solo per Angular Material per importare tutto

-Per fare il property binding (Es. : su vue) si usano le []

-Event binding mettendo le () ad esempio (click)="azione da fare"

-<ng-template> tag che vede solo angular ma non conta nel dom

-Direttive strutturali (modificano la struttura del dom) *ngIf, *ngFor.
    Contraddistinte dal * davanti

    *ngIf va a non creare proprio la parte di codice nel caso fosse folse
    utilizzabile con then e else per rendere più leggibile/capibile il codice

    *ngFor utilizzato per creare più elementi in maniera dinamica
    con ngFor possiamo usare (as etc.. si può mettere quello che si vuole):
        -index as i
        -count as c
        -first as isFirst
        -last as isLast
        -even as isEven
        -odd as isOdd

-ngSwitch usato per evitare di scrivere una lista infinita di ngIf
    [ngSwitch]="elemento di riferimento"

-ngStyle consente di cambiare lo style css di un elemento in base a qualcosa
    [ngStyle]="{'background': persona.isOnline ? 'green' : 'red'}"
    [ngStyle]="{'background': persona.color}"

-ngClass consente di cambiare la classe css di un elemento in base a qualcosa
    [ngClass]="{'classe da dare o molteplici, basta separare con lo spazio' : elemento in base al quale dare la classe o meno}"
    [ngClass]="{'cerchioOnline' : persona.isOnline, 'cerchioOffline' : !persona.isOnline, 'check' : persona.controllo == 'attivo'}"
    Col ternario si può inserire solo 1 opzione
    [ngClass]="{'background': persona.isOnline ? 'cerchioOnline' : 'cerchioOffline'}"

-Passaggio di dati dal componente parent al child (prop di Vue)
    Nel parent andiamo a scrivere sul componente child i dati da passare con nome e nome dell'elemento da passare
        [data]="shareData"
    Aggiungiamo l'import al child con 
        import {Input} from '@angular/core';
    E inseriamo dentro l'export 
        @Input() data: any;
    Non resta che richiamare i dati ricevuti nel child, in questo caso avremo l'array di oggetti dentro data

-Passaggio di dati dal componente child al parent (emit di Vue)
    Aggiungiamo l'import al child con 
        import {Output} from '@angular/core';
    E inseriamo dentro l'export 
        @Output() nomeEvento = new EventEmitter()
        Oppure se vogliamo anche specificare il tipo di dati
        @Output() nomeEvento = new EventEmitter<string>()
    Creiamo una funzione che viene richiamata ad esempio con un click nel child e richiamiamo il nostro nomeEvento
        mandaDati(){
            this.mandaDatiEvento.emit(this.nome)
        }
    Mettiamo in ascolto il parent così che sia in attesa dell'evento
    Per farlo richiamiamo l'evento del child nel parent dove importiamo il componente nel html
        <app-prova (mandaDatiEvento)="recivedData($event)"></app-prova>
    E andiamo a gestire cosa fa con quei dati, in questo caso chiamiamo una funzione che va a console loggarli
        recivedData(value: string){
            console.log(value)
        }

-Variabili template, sono riferementi ad elementi nell'html che possiamo usare per prendere i dati di quell'elemento
    Indichiamo la variabile template con # in questo caso #inputValue
        <input #inputValue value="Ciao">
    Importiamo ViewChild nel componente
        import { ViewChild } from '@angular/core';
    Nell'export andiamo a indicare cosa vogliamo prendere/fare. In questo caso andiamo a prendere inputValue e lo 
    inseriamo dentro inputSaluti, specifichiamo che non sarà null o undefined con il ! finale e diciamo che ci
    aspettiamo un ElementRef di tipo HTMLInputElement, così che quando lo useremo dopo ci dia già i suggerimenti
        @ViewChild('inputValue') inputSaluti!: ElementRef<HTMLInputElement>
    Fatto questo possiamo richiamare il nostro inputSaluti ad esempio con una funzione (console log della value)
        onClick(){
            console.log(this.inputSaluti.nativeElement.value)
        }

-Creare delle Direttive, eseguire il comando da terminale
    ng generate directive nomeDirettiva          (short ng g d nomeDirettiva)
    Appena creato col comando avremo due file uno di test e uno normale chiamato nome.directive.ts dentro app
    Per essere ordinati consiglio di creare una sottocartella direttive->nomeDirettiva ovvero
        app
         -direttive
            -nomeDirettiva
    Parte tipica delle direttive è @Directive
    Andiamo a fare l'import nell'app.module.ts
    Andiamo a scrivere nella direttiva cosa vogliamo che faccia
        constructor(private element: ElementRef) {
            this.element.nativeElement.style.backgroundColor = 'yellow'
        }
    Applichiamo la direttiva ad un elemento di app in questo caso un p
        <p appHighlight>Ciao sono un paragrafo</p>
    Andiamo a creare qualcosa di più dinamico usando un @HostListener per far cambiare colore al passare del mouse
        @HostListener('mouseenter') onMouseEnter(){
            this.cambiaColore('yellow')
        }
        @HostListener('mouseleave') onMouseLeave(){
            this.cambiaColore('transparent')
        }
        cambiaColore(colore: string){
            this.element.nativeElement.style.backgroundColor = colore
        }
    
-Funzioni Pipe, si inseriscono con | dopo le variabili che vengono chiamate, esempio 
    <p>Ciao benvenuti al {{title | uppercase}}</p>
    tra le più comuni uppercase, lowercase, date, number, percent, currency
    se mettiamo : possiamo specificare ulteriori parametri ad esempio number:'2.1-4'
    vuole dire che avremo 2 numeri interi e da 1 a 4 decimali
    si possono creare anche custom
    c'è un opzione per far basare il formato della data, currency etc.. in base alla posizione dell'utente

-Service, possono comunicare in maniera trasversale con i componenti e si usano per lasciare ai componenti solo il lato di 
mostrare i dati e non parti logiche, quelle possiamo svolgerle nei Service
Il comando per generare un service è
    ng generate service nomeServizio          (short ng g s nomeServizio)
    Appena creato col comando avremo due file uno di test e uno normale chiamato nome.services.ts dentro app
    Per essere ordinati consiglio di creare una sottocartella
        app
         -servizi
    Parte caratteristica dei service è @Injectable
    e dentro il service si va a indicare dove passarlo con providedIn, nel caso sotto lo passiamo al root quindi a tutta l'app ma
    potremmo passarlo anche ad un singolo modulo
        @Injectable({
            providedIn: 'root'
        })
    I service vanno importati anche nei component ad esempio se volessimo importarlo dentro prova
        import { ServizioProvaService } from '../servizi/servizio-prova.service';
        e dentro l'export 
            constructor(private servizioProva: ServizioProvaService) { }
    Una volta importato potremo accederci facendo in questo caso this.servizioProva.nome variabile o funzione

-Routing, serve per spostarci da una "pagina" all'altra/da un componente a un altro
    Se ci servisse creare il file di routing perchè non lo abbiamo possiamo usare il comando
        ng generate module app-routing --flat --module=app
    --flat evita la creazione di una cartella specifica per il routing
    --module=app lo andrà ad importare nel app.module.ts
    Creiamo una cartella componenti per comodità e creiamo dei nuovi componenti al suo interno con
        ng g c componenti/about, ng g c componenti/contact, ng g c componenti/home, etc.. 
    dentro app-routing andiamo a definire i componenti e i loro path
        const routes: Routes = [
            {path: '', component: HomeComponent},
            {path: 'about', component: AboutComponent},
            {path: 'contact', component: ContactComponent}
        ];
    dentro app.module andiamo a chiamare il router con
        <router-outlet></router-outlet>
    fatto questo se metteremo nel link /about arriveremo al component about, /contact il component contact e al link base la home
    per creare i collegamenti su elementi del sito possiamo usare routerLink
        <a routerLink="about">About</a>
    
-Routing con parametri, ovvero se prendiamo una route di prima il link sarà  link/contact/parametri da passare
    nell'app-routing.module andremo a mettere questo path dove metteremo : il nome del parametro così da creare la nuova rotta
        {path: 'contact/:id', component: ContactComponent}
    dentro il componente in questo caso contatti andiamo a mettere nel constructor private route: ActivatedRoute
    al quale potremo accedere con this.route e in questo caso this.route.snapshot.paramMap.get('id')
    